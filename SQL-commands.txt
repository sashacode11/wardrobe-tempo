-- Create wardrobe_items table
CREATE TABLE wardrobe_items (
  id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  user_id UUID NOT NULL DEFAULT gen_random_uuid(),
  name TEXT,
  category TEXT,
  image_url TEXT,
  occasions TEXT,
  color TEXT,
  location TEXT,
  tags TEXT,
  seasons TEXT,
  notes TEXT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  brand TEXT
);

-- Create outfits table
CREATE TABLE outfits (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  user_id UUID,
  name TEXT NOT NULL,
  occasions TEXT[] DEFAULT '{}',
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  updated_at TIMESTAMP WITH TIME ZONE DEFAULT now(),
  is_complete BOOLEAN DEFAULT true,
  missing_items_count INTEGER DEFAULT 0,
  last_incomplete_at TIMESTAMP WITH TIME ZONE
);

-- Create outfit_items junction table
CREATE TABLE outfit_items (
  id UUID DEFAULT gen_random_uuid() PRIMARY KEY,
  outfit_id UUID,
  clothing_item_id BIGINT,
  created_at TIMESTAMP WITH TIME ZONE DEFAULT now()
);

-- Add foreign key constraints
ALTER TABLE wardrobe_items 
ADD CONSTRAINT wardrobe_items_user_id_fkey 
FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

ALTER TABLE outfits 
ADD CONSTRAINT outfits_user_id_fkey 
FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;

ALTER TABLE outfit_items 
ADD CONSTRAINT outfit_items_outfit_id_fkey 
FOREIGN KEY (outfit_id) REFERENCES outfits(id) ON DELETE CASCADE;

ALTER TABLE outfit_items 
ADD CONSTRAINT outfit_items_clothing_item_id_fkey 
FOREIGN KEY (clothing_item_id) REFERENCES wardrobe_items(id) ON DELETE CASCADE;

-- Enable Row Level Security on all tables
ALTER TABLE wardrobe_items ENABLE ROW LEVEL SECURITY;
ALTER TABLE outfits ENABLE ROW LEVEL SECURITY;
ALTER TABLE outfit_items ENABLE ROW LEVEL SECURITY;

-- RLS policies for wardrobe_items (using simplified ALL policy like your original)
CREATE POLICY "enable all actions for users based on users_id" ON wardrobe_items 
FOR ALL USING (auth.uid() = user_id);

-- RLS policies for outfits
CREATE POLICY "Users can view their own outfits" ON outfits 
FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can insert their own outfits" ON outfits 
FOR INSERT WITH CHECK (true);

CREATE POLICY "Users can update their own outfits" ON outfits 
FOR UPDATE USING (auth.uid() = user_id);

CREATE POLICY "Users can delete their own outfits" ON outfits 
FOR DELETE USING (auth.uid() = user_id);

-- RLS policies for outfit_items (matching your original policies)
CREATE POLICY "Users can view their own outfit items" ON outfit_items 
FOR SELECT USING (
  EXISTS (
    SELECT 1 FROM outfits 
    WHERE outfits.id = outfit_items.outfit_id 
    AND outfits.user_id = auth.uid()
  )
);

CREATE POLICY "Users can insert their own outfit items" ON outfit_items 
FOR INSERT WITH CHECK (true);

CREATE POLICY "Users can update their own outfit items" ON outfit_items 
FOR UPDATE USING (
  EXISTS (
    SELECT 1 FROM outfits 
    WHERE outfits.id = outfit_items.outfit_id 
    AND outfits.user_id = auth.uid()
  )
);

CREATE POLICY "Users can delete their own outfit items" ON outfit_items 
FOR DELETE USING (
  EXISTS (
    SELECT 1 FROM outfits 
    WHERE outfits.id = outfit_items.outfit_id 
    AND outfits.user_id = auth.uid()
  )
);

-- Create function to automatically update updated_at timestamp
CREATE OR REPLACE FUNCTION update_updated_at_column()
RETURNS TRIGGER AS $
BEGIN
    NEW.updated_at = now();
    RETURN NEW;
END;
$ language 'plpgsql';

-- Create triggers to automatically update updated_at
CREATE TRIGGER update_wardrobe_items_updated_at 
BEFORE UPDATE ON wardrobe_items 
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

CREATE TRIGGER update_outfits_updated_at 
BEFORE UPDATE ON outfits 
FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create indexes for better performance
CREATE INDEX idx_wardrobe_items_user_id ON wardrobe_items(user_id);
CREATE INDEX idx_outfits_user_id ON outfits(user_id);
CREATE INDEX idx_outfit_items_outfit_id ON outfit_items(outfit_id);
CREATE INDEX idx_outfit_items_clothing_item_id ON outfit_items(clothing_item_id);

-- Storage bucket and policies for images
-- Create wardrobe-images bucket (run this in Storage settings or via dashboard)
INSERT INTO storage.buckets (id, name, public) VALUES ('wardrobe-images', 'wardrobe-images', true);

-- Storage policies for image handling
CREATE POLICY "authenticated users can upload" ON storage.objects 
FOR INSERT WITH CHECK (auth.role() = 'authenticated');

CREATE POLICY "Allow public read on wardrobe-images" ON storage.objects 
FOR SELECT USING (bucket_id = 'wardrobe-images');